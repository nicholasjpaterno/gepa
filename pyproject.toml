[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gepa"
version = "0.1.0"
description = "GEPA: Reflective Prompt Evolution - An inference-agnostic prompt optimization toolkit based on research by Agrawal et al. (2025)"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Lakshya A. Agrawal", email = "lakshya@berkeley.edu"},
    {name = "Shangyin Tan", email = "shangyin@berkeley.edu"},
    {name = "Dilara Soylu", email = "dsoylu@stanford.edu"},
    {name = "Noah Ziems", email = "nziems@nd.edu"},
    {name = "Rishi Khare", email = "rishi.khare@berkeley.edu"},
    {name = "Krista Opsahl-Ong", email = "krista.opsahl@databricks.com"},
    {name = "Arnav Singhvi", email = "arnav@stanford.edu"},
    {name = "Herumb Shandilya", email = "herumb@stanford.edu"},
    {name = "Michael J. Ryan", email = "mjryan@stanford.edu"},
    {name = "Meng Jiang", email = "mjiang2@nd.edu"},
    {name = "Christopher Potts", email = "cgpotts@stanford.edu"},
    {name = "Koushik Sen", email = "ksen@cs.berkeley.edu"},
    {name = "Alexandros G. Dimakis", email = "dimakis@austin.utexas.edu"},
    {name = "Ion Stoica", email = "istoica@berkeley.edu"},
    {name = "Dan Klein", email = "klein@cs.berkeley.edu"},
    {name = "Matei Zaharia", email = "matei@berkeley.edu"},
    {name = "Omar Khattab", email = "okhattab@mit.edu"}
]
maintainers = [
    {name = "GEPA Community"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "llm", "prompt-optimization", "genetic-algorithm", "pareto", 
    "machine-learning", "ai", "natural-language-processing"
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "asyncpg>=0.29.0",
    "httpx>=0.25.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]
all = ["gepa[dev,docs]"]

[project.urls]
Homepage = "https://github.com/nicholasjpaterno/gepa"
Repository = "https://github.com/nicholasjpaterno/gepa"
Issues = "https://github.com/nicholasjpaterno/gepa/issues"

[project.scripts]
gepa = "gepa.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]